# Sample workflow for building and deploying a Next.js site to a server via SSH
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Server

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to the server
permissions:
  contents: read

# Allow one concurrent deployment
concurrency:
  group: "deploy"
  cancel-in-progress: true

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/pnpm-lock.json" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine packager manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: ${{ steps.detect-package-manager.outputs.manager }}    
      - name: Install dependencies
        run: yarn install
      - name: Setup Pages
        uses: actions/configure-pages@v2
        with:
          static_site_generator: next
          token: ${{ secrets.DEPLOY_TO_GITHUB_PAGE }}
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Prepare Deployment Package
        run: tar -czvf deploy.tar.gz ./out
      - name: Upload Deployment Package
        uses: actions/upload-artifact@v3
        with:
          name: deploy-package
          path: deploy.tar.gz

  # Deployment job
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # - name: Checkout
      #   uses: actions/checkout@v3
      - name: Download Deployment Package
        uses: actions/download-artifact@v3
        with:
          name: deploy-package
          path: ./
      - name: List files
        run: ls -la
      - name: Copy deployment package via SSH
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "./deploy.tar.gz"
          target: "/usr/local/nextra-blog"
      - name: Extract deployment package on server
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            tar -xzvf /usr/local/nextra-blog/deploy.tar.gz -C /var/www/html/
            mv /var/www/html/out /var/www/html/nextra-blog
            rm /usr/local/nextra-blog/deploy.tar.gz
            # Restart server or services if needed
            nginx -s reload
